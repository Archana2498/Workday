<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_hr_workday.WorkdayApprovalToDosHelperUtilsSNC</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>WorkdayApprovalToDosHelperUtilsSNC</name>
        <script><![CDATA[var WorkdayApprovalToDosHelperUtilsSNC = Class.create();
WorkdayApprovalToDosHelperUtilsSNC.prototype = {
    initialize: function() {},
    isReportActive: function(serviceJobName) {
        var jobTrackerRecord = new GlideRecord('sn_hr_workday_configuration_workday_approval_to_dos');
        jobTrackerRecord.addQuery('u_workday_integration_service_name', serviceJobName);
        jobTrackerRecord.addQuery('u_active', true);
        jobTrackerRecord.query();
        if (jobTrackerRecord.next()) {
            return true;
        } else {
            return false;
        }
    },
    getMainJobSysIdOfPullTodos: function(serviceJobName) {
        var jobTrackerRecord = new GlideRecord('sn_hr_workday_configuration_workday_approval_to_dos');
        jobTrackerRecord.addQuery('u_workday_integration_service_name', serviceJobName);
        jobTrackerRecord.orderByDesc('sys_created_on');
        jobTrackerRecord.setLimit(1);
        jobTrackerRecord.query();
        if (jobTrackerRecord.next()) {
            return jobTrackerRecord.u_job_tracker;
        }
        return '';
    },
    completeToDosReportAndIsCompleteMainJob: function(serviceJobName, grMainJob) {
        var jobTrackerRecord = new GlideRecord('sn_hr_workday_configuration_workday_approval_to_dos');
        jobTrackerRecord.addQuery('u_workday_integration_service_name', serviceJobName);
        jobTrackerRecord.orderByDesc('sys_created_on');
        jobTrackerRecord.setLimit(1);
        jobTrackerRecord.query();
        if (jobTrackerRecord.next()) {
            jobTrackerRecord.u_is_complete = true;
            jobTrackerRecord.update();
        }

        var checkJobTrackerRecord = new GlideRecord('sn_hr_workday_configuration_workday_approval_to_dos');
        checkJobTrackerRecord.addQuery('u_is_complete', false);
        checkJobTrackerRecord.addQuery('u_job_tracker', grMainJob.sys_id);
        checkJobTrackerRecord.query();
        if (checkJobTrackerRecord.next() || grMainJob.state == 'failed') {
            return false;
        }
        return true;
    },
    updateRecordClass: function(source, className) {
        var grToDo = new GlideRecord('sn_hr_workday_todo');
        grToDo.addEncodedQuery("u_workday_id=" + source.u_workdayid);
        grToDo.query();
        grToDo.sys_class_name = className;
        grToDo.updateMultiple();
    },
    updateTimeOffFields: function(source, target, table) {
        var grToDoP = new GlideRecord(table);
        grToDoP.addEncodedQuery("u_workday_id=" + source.u_workdayid);
        grToDoP.query();
        while (grToDoP.next()) {
            grToDoP.u_start_date = target.u_first_day_of_time_off;
            grToDoP.u_end_date = target.u_last_day_of_time_off;
            grToDoP.u_type_of_leave = target.u_time_off_type_for_time_off_entry;
            grToDoP.u_total = target.u_time_off_total_units_hours > 0 ? target.u_time_off_total_units_hours : target.u_time_off_total_units_days;
            grToDoP.u_time_off_plan_id = target.u_time_off_plan_id;
            grToDoP.u_unit_of_time = target.u_unit_time;
            grToDoP.update();
        }
    },
    updateTerminationFields: function(source, target, toDoTable) {
        var grToDoP = new GlideRecord(toDoTable);
        grToDoP.addEncodedQuery("u_workday_id=" + source.u_workdayid);
        grToDoP.query();
        while (grToDoP.next()) {
            grToDoP.u_position = target.u_position;
            grToDoP.u_primary_reason = target.u_primary_reason;
            grToDoP.update();
        }
    },
    updateJobRequisitionFields: function(source, target, toDoTable) {
        var grToDoP = new GlideRecord(toDoTable);
        grToDoP.addEncodedQuery("u_workday_id=" + source.u_workdayid);
        grToDoP.query();
        while (grToDoP.next()) {
            grToDoP.u_replacement_for = target.u_replacement_for;
            grToDoP.u_hiring_manager = this.getUser(source.u_hiring_manager_employee_id);
            grToDoP.update();
        }
    },
    updateCorrectTimeOffFields: function(source, target, table) {
        var grToDoP = new GlideRecord(table);
        grToDoP.addEncodedQuery("u_workday_id=" + source.u_workdayid);
        grToDoP.query();
        while (grToDoP.next()) {
            grToDoP.u_date = target.u_date;
            grToDoP.u_day_of_the_week = target.u_day_of_the_week;
            grToDoP.u_correction_to_requested = target.u_total_units;
            grToDoP.u_unit_of_time = target.u_unit;
            grToDoP.u_leave_type = target.u_type;
            grToDoP.update();
        }
    },
    updateSpendAuthorisationFields: function(source, target, table) {
		gs.info('line 101'+table);
        var grToDoP = new GlideRecord(table);
        grToDoP.addEncodedQuery("u_workday_id=" + source.u_workdayid);
        grToDoP.query();
		gs.info('line 105'+grToDoP.getRowCount());
        while (grToDoP.next()) {
            grToDoP.u_start_date = target.u_start_date;
            grToDoP.u_end_date = target.u_end_date;
            grToDoP.u_company = target.u_company;
            grToDoP.u_description = target.u_description;
            grToDoP.u_business_purpose = target.u_business_purpose;
            grToDoP.u_reimbursement_payment_type = target.u_reimbursement_payment_type;
            grToDoP.u_justification = target.u_justification;
            grToDoP.update();
        }
    },

    updateLeaveOfAbsenceFields: function(source, target, table) {
        var gdt1 = new GlideDateTime(target.u_first_day_of_leave);
        var gdt2 = new GlideDateTime(target.u_estimated_last_day_of_leave);
        var dur = GlideDateTime.subtract(gdt1, gdt2); //the difference between gdt1 and gdt2
        var days = dur.getNumericValue() / (1000 * 60 * 60 * 24);

        var grToDoP = new GlideRecord(table);
        grToDoP.addEncodedQuery("u_workday_id=" + source.u_workdayid);
        grToDoP.query();
        while (grToDoP.next()) {
            grToDoP.u_total = Math.floor(days) + ' days';
            grToDoP.u_leave_type = source.u_leave_type;
            grToDoP.update();
        }
    },
    updateCompensationFields: function(source, target, table) {
        var grToDoP = new GlideRecord(table);
        grToDoP.addEncodedQuery("u_workday_id=" + source.u_workdayid);
        grToDoP.query();
        while (grToDoP.next()) {
            grToDoP.u_reason = target.u_business_process_reason;
            grToDoP.u_position = target.u_position;
            grToDoP.u_effective_date = target.u_effective;
            grToDoP.u_employee_visibility_date = target.u_employee_visibility_date;
            grToDoP.update();
        }
    },
    updateJobChangeFields: function(source, target, table) {
        // var grToDoP = new GlideRecord(table);
        // grToDoP.addEncodedQuery("u_workday_id=" + source.u_workdayid);
        // grToDoP.query();
        // while (grToDoP.next()) {
        //     grToDoP.u_todo_title = this.getTodoTitle(grToDoP.u_request_type, grToDoP.u_requested_for.name);
        //     grToDoP.update();
        // }
    },
    insertComments: function(source) {
        var grComment = new GlideRecord(WorkdayApprovalToDosHelperSNC.Workday_Table_Name.WorkDay_Comment);
        grComment.addEncodedQuery("u_workday_id=" + source.u_comment_workdayid);
        grComment.setLimit(1);
        grComment.query();
        if (!grComment.next()) {
            grComment.initialize();
            grComment.u_comments = source.u_comment;
            grComment.u_commented_on = new GlideDateTime(source.u_comment_created_moment);
            grComment.u_first_name = source.u_comment_by_person.split(" ")[0];
            grComment.u_last_name = source.u_comment_by_person.split(" ")[1];
            grComment.u_workday_id = source.u_comment_workdayid;
            grComment.u_event_workday_id = source.u_workdayid;
            grComment.u_commented_by = this.getUser(source.u_employee_id);
            grComment.insert();
        }
    },
    getNameOfUser: function(employeeNumber) {
        var grUser = new GlideRecord('sys_user');
        grUser.addEncodedQuery('employee_numberISNOTEMPTY^employee_number=' + employeeNumber);
        grUser.setLimit(1);
        grUser.query();
        if (grUser.next()) {
            return grUser.name;
        } else {
            return "";
        }
    },
    getUser: function(employeeNumber) {
        var grUser = new GlideRecord('sys_user');
        grUser.addEncodedQuery('employee_numberISNOTEMPTY^employee_number=' + employeeNumber);
        grUser.setLimit(1);
        grUser.query();
        if (grUser.next()) {
            return grUser.sys_id;
        } else {
            return "";
        }
    },
    addAttachment: function(source, className) {
        var grtoAtt = new GlideRecord(className);
        grtoAtt.addEncodedQuery("u_workday_id=" + source.u_workdayid);
        grtoAtt.query();
        while (grtoAtt.next()) {
            var attachmentID = grtoAtt.u_attachment_ids.toString();
            if (attachmentID.indexOf(source.u_attachment_workdayid.toString()) < 0 || grtoAtt.u_attachment_ids == "") {
                var attachment = new GlideSysAttachment();
                var atr = attachment.writeBase64(grtoAtt, source.u_attachment_name, source.u_attachment_content_type, source.u_attachment_content);
                grtoAtt.u_attachment_ids = (grtoAtt.u_attachment_ids + "," + source.u_attachment_workdayid);
                grtoAtt.update();

            }
        }
    },
    getUserDetails: function() {
        var userID = gs.getUserID();
        var userGR = new GlideRecord('sys_user');
        userGR.addQuery('sys_id', userID);
        userGR.query();
        if (userGR.next()) {
            var name = userGR.getValue('name');
            var email = userGR.getValue('email');
            return name + " (" + email + ") : ";
        } else
            return '';
    },
    type: 'WorkdayApprovalToDosHelperUtilsSNC'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-04-05 05:11:22</sys_created_on>
        <sys_id>5cfcf089870a255018c742ec0ebb35ed</sys_id>
        <sys_mod_count>94</sys_mod_count>
        <sys_name>WorkdayApprovalToDosHelperUtilsSNC</sys_name>
        <sys_package display_value="HR Service Delivery Integration with Workday" source="sn_hr_workday">d4fb8bd8db5b0010205cdf6b5e96190e</sys_package>
        <sys_policy/>
        <sys_scope display_value="HR Service Delivery Integration with Workday">d4fb8bd8db5b0010205cdf6b5e96190e</sys_scope>
        <sys_update_name>sys_script_include_5cfcf089870a255018c742ec0ebb35ed</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-28 12:20:30</sys_updated_on>
    </sys_script_include>
</record_update>
