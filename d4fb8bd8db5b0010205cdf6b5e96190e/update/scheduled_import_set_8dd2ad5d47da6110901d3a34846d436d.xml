<?xml version="1.0" encoding="UTF-8"?><record_update table="scheduled_import_set">
    <scheduled_import_set action="INSERT_OR_UPDATE">
        <active>false</active>
        <business_calendar/>
        <concurrent_import>false</concurrent_import>
        <condition><![CDATA[var glideWorkdayJobTracker = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_SERVICE_JOB_TRACKER_TABLE);
glideWorkdayJobTracker.addQuery('job_state', 'running');
glideWorkdayJobTracker.addQuery('workday_integration_service', WorkdayApprovalToDosHelperSNC.Workday_Approval_Service_Name.Leave_of_Absence_Request_ToDos);
glideWorkdayJobTracker.query();
var result = true;
if (glideWorkdayJobTracker.next()) {
	gs.info(glideWorkdayJobTracker.scheduled_import+" - Scheduled Import is already running");
    result = false;
}
result;]]></condition>
        <conditional>true</conditional>
        <connection_override/>
        <data_source display_value="Workday Pull Leave of Absence Request">2fe16d1d47da6110901d3a34846d43fb</data_source>
        <entered_time/>
        <map/>
        <max_drift/>
        <name>Workday Pull Leave of Absence Request Scheduled Import</name>
        <offset/>
        <offset_type>0</offset_type>
        <order/>
        <parent/>
        <partition_method>roundRobin</partition_method>
        <partition_script><![CDATA[(function partitionHash(import_set_row) {

	// Add your code here
	
	// eg:
	// return import_set_row.u_important_category;
	// This would ensure all rows with the same 'u_important_category' value will be in the same Import Set.

	 return import_set_row.sys_import_row;

})(import_set_row);]]></partition_script>
        <partition_size/>
        <post_script><![CDATA[try {
    var workdayApprovalServiceNameToDos = WorkdayApprovalToDosHelperSNC.Workday_Approval_Service_Name.Leave_of_Absence_Request_ToDos;
    var grMainJob = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_JOB_TRACKER_TABLE);
    grMainJob.addQuery("sys_id", new WorkdayApprovalToDosHelperUtils().getMainJobSysIdOfPullTodos(workdayApprovalServiceNameToDos));
    grMainJob.query();
    if (grMainJob.next()) {

        var newJobTrackerRecord = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_SERVICE_JOB_TRACKER_TABLE);
        newJobTrackerRecord.addQuery("import_set", import_set.sys_id);
        newJobTrackerRecord.query();
        if (newJobTrackerRecord.next()) {
            newJobTrackerRecord.scheduled_import = import_set.schedule_import;
            var gr = new GlideRecord("sys_import_set_run");
            gr.addQuery("set", import_set.sys_id);
            gr.query();
            if (gr.next()) {
                newJobTrackerRecord.import_set_run = gr.sys_id;
                if (newJobTrackerRecord.job_state == 'running' && (gr.state == 'complete' || gr.state == 'complete_with_errors')) {
                    newJobTrackerRecord.job_state = 'completed';
                    newJobTrackerRecord.job_ended_at = new GlideDateTime();
                    if (newJobTrackerRecord.pull_next_chunk == false) {
                        if (new WorkdayApprovalToDosHelperUtils().completeToDosReportAndIsCompleteMainJob(workdayApprovalServiceNameToDos, grMainJob)) {
                            grMainJob.state = 'complete';
                            grMainJob.job_ended_at = new GlideDateTime();
                        }
                    }
                } else if (newJobTrackerRecord.job_state == 'running' && (gr.state == 'cancelled' || gr.state == 'incomplete')) {
                    newJobTrackerRecord.job_state = 'failed';
                    newJobTrackerRecord.job_ended_at = new GlideDateTime();
                    newJobTrackerRecord.error_source = 'transformation_error';
                    newJobTrackerRecord.error_message = gs.getMessage('Tranformation error with import set-{0} as "{1}" state', [import_set.number, gr.state]);

                    grMainJob.state = 'failed';
                    grMainJob.error_message = gs.getMessage('Tranformation error with import set-{0} as "{1}" state', [import_set.number, gr.state]);
                    grMainJob.job_ended_at = new GlideDateTime();
                }
                newJobTrackerRecord.update();
            }
        }
        grMainJob.update();
    }

} catch (ex) {
    var message = ex.getMessage();
    gs.error(message);
}]]></post_script>
        <post_script_bool>true</post_script_bool>
        <pre_script><![CDATA[try {
    var workdayApprovalServiceNameToDos = WorkdayApprovalToDosHelperSNC.Workday_Approval_Service_Name.Leave_of_Absence_Request_ToDos;
    var dataPullActionName = 'sn_workday_hr_spke.look_up_inprogress_approval_requests';
	
    var grMainJob = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_JOB_TRACKER_TABLE);
    grMainJob.addQuery("sys_id", new WorkdayApprovalToDosHelperUtils().getMainJobSysIdOfPullTodos(workdayApprovalServiceNameToDos));
	grMainJob.addQuery("state", "running");
    grMainJob.query();
    if (grMainJob.next()) {
        var grMainJobSysId = grMainJob.sys_id;

        try {
            var attachment = new GlideSysAttachment();
            var agr = attachment.getAttachments('sys_data_source', data_source.sys_id);
            while (agr.next()) {
                attachment.deleteAttachment(agr.getValue('sys_id'));
            } //delete attachments exits already in data source


            var newJobTrackerRecord = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_SERVICE_JOB_TRACKER_TABLE);
            newJobTrackerRecord.initialize();
            newJobTrackerRecord.import_set = import_set.sys_id;
            newJobTrackerRecord.job_state = 'running';
            newJobTrackerRecord.job_type = 'scheduled';
            newJobTrackerRecord.workday_integration_service = workdayApprovalServiceNameToDos;
            newJobTrackerRecord.workday_integration_job_tracker = grMainJobSysId;
            newJobTrackerRecord.job_started_at = new GlideDateTime();

            var pullNextChunk;
            //initial load for specified configured parameter when no records are there in workday todos inbound table else take latest workday last functional updated date as start_date_time in action's input.
            var glidePullToDosConfiguration = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_CONFIGURATIONS_TABLE);
            glidePullToDosConfiguration.addQuery('active', true);
            glidePullToDosConfiguration.orderByDesc('sys_created_on');
            glidePullToDosConfiguration.setLimit(1);
            glidePullToDosConfiguration.query();
            if (glidePullToDosConfiguration.next()) {
                var inputs = {};
                var startDateTimeJob, endDateTimeJob;
                var glideWorkdayJobTracker = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_SERVICE_JOB_TRACKER_TABLE);
                glideWorkdayJobTracker.addQuery('job_state', 'completed');
                glideWorkdayJobTracker.addQuery('workday_integration_service', workdayApprovalServiceNameToDos);
                glideWorkdayJobTracker.orderByDesc('end_date_time_api_parameter');
                glideWorkdayJobTracker.setLimit(1);
                glideWorkdayJobTracker.query();
                if (glideWorkdayJobTracker.next()) {
                    inputs['start_date'] = new ImportSetUtils().getConvertedDateTime(new GlideDateTime(glideWorkdayJobTracker.end_date_time_api_parameter).getValue());
                    startDateTimeJob = new GlideDateTime(glideWorkdayJobTracker.end_date_time_api_parameter).getDisplayValue();
                    var gdt = new GlideDateTime(glideWorkdayJobTracker.end_date_time_api_parameter.toString());
                    var ms = glidePullToDosConfiguration.load_interval.dateNumericValue();
                    gdt.add(ms);
                    var endDateTime = gdt.getDisplayValue();
                    if (gdt.getNumericValue() > new GlideDateTime(grMainJob.job_started_at).getNumericValue()) {
                        inputs['end_date'] = new ImportSetUtils().getConvertedDateTime(new GlideDateTime(grMainJob.job_started_at).getValue());
                        endDateTimeJob = new GlideDateTime(grMainJob.job_started_at).getDisplayValue();
                        pullNextChunk = false;
                    } else {
                        inputs['end_date'] = new ImportSetUtils().getConvertedDateTime(gdt.getValue());
                        endDateTimeJob = endDateTime;
                        pullNextChunk = true;
                    }
                } else {
                    inputs['start_date'] = new ImportSetUtils().getConvertedDateTime(new GlideDateTime(glidePullToDosConfiguration.initial_load_start_datetime).getValue());
                    startDateTimeJob = new GlideDateTime(glidePullToDosConfiguration.initial_load_start_datetime).getDisplayValue();
                    var gdt1 = new GlideDateTime(glidePullToDosConfiguration.initial_load_start_datetime.toString());
                    var ms1 = glidePullToDosConfiguration.load_interval.dateNumericValue();
                    gdt1.add(ms1);
                    var endDateTime1 = gdt1.getDisplayValue();
                    if (gdt1.getNumericValue() > new GlideDateTime(grMainJob.job_started_at).getNumericValue()) {
                        inputs['end_date'] = new ImportSetUtils().getConvertedDateTime(new GlideDateTime(grMainJob.job_started_at).getValue());
                        endDateTimeJob = new GlideDateTime(grMainJob.job_started_at).getDisplayValue();
                        pullNextChunk = false;
                    } else {
                        inputs['end_date'] = new ImportSetUtils().getConvertedDateTime(gdt1.getValue());
                        endDateTimeJob = endDateTime1;
                        pullNextChunk = true;
                    }
                }

                newJobTrackerRecord.start_date_time_api_parameter = startDateTimeJob;
                newJobTrackerRecord.end_date_time_api_parameter = endDateTimeJob;
                if (!gs.nil(pullNextChunk)) {
                    newJobTrackerRecord.pull_next_chunk = pullNextChunk;
                }
                newJobTrackerRecord.insert();

                var glideWorkdayApprovalToDosReportConfiguration = new GlideRecord(WorkdayApprovalToDosHelperSNC.Workday_Table_Name.Workday_Approval_Report_Config_Table);
                glideWorkdayApprovalToDosReportConfiguration.addQuery('u_workday_integration_service_name', workdayApprovalServiceNameToDos);
				glideWorkdayApprovalToDosReportConfiguration.addEncodedQuery('u_report_nameISNOTEMPTY^u_business_process_idISNOTEMPTY^u_active=true');
                glideWorkdayApprovalToDosReportConfiguration.setLimit(1);
                glideWorkdayApprovalToDosReportConfiguration.query();
                if (glideWorkdayApprovalToDosReportConfiguration.next()) {
                    inputs['report_owner_username'] = glidePullToDosConfiguration.workday_to_dos_report_owner_username;
                    inputs['report_name'] = glideWorkdayApprovalToDosReportConfiguration.u_report_name;
                    inputs['data_source_reference'] = data_source;
                    inputs['business_process_id'] = glideWorkdayApprovalToDosReportConfiguration.u_business_process_id;
                    inputs['transaction_status_id'] = glideWorkdayApprovalToDosReportConfiguration.u_transaction_status_id;
                    var outputs = sn_fd.FlowAPI.executeAction(dataPullActionName, inputs, 1800000);
                    var status = outputs['status']; // Choice
                    var error_message = outputs['error_message'];

                    if (status == 'Error') {
                        var updateJobTrackerRecord1 = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_SERVICE_JOB_TRACKER_TABLE);
                        if (updateJobTrackerRecord1.get(newJobTrackerRecord.sys_id)) {
                            updateJobTrackerRecord1.job_state = 'failed';
                            updateJobTrackerRecord1.error_source = 'api_error';
                            updateJobTrackerRecord1.error_message = error_message;
                            updateJobTrackerRecord1.job_ended_at = new GlideDateTime();
                            updateJobTrackerRecord1.update();

                            grMainJob.state = 'failed';
                            grMainJob.error_message = error_message;
                            grMainJob.job_ended_at = new GlideDateTime();
                        }
                    }
                }
            } else {
                if (!gs.nil(pullNextChunk)) {
                    newJobTrackerRecord.pull_next_chunk = pullNextChunk;
                }
                newJobTrackerRecord.error_source = 'configuration_error';
                newJobTrackerRecord.job_state = 'failed';
                newJobTrackerRecord.error_message = gs.getMessage("No active workday pull to-dos configuration record found");
                newJobTrackerRecord.job_ended_at = new GlideDateTime();
                newJobTrackerRecord.insert();

                grMainJob.state = 'failed';
                grMainJob.error_message = gs.getMessage("No active workday pull to-dos configuration record found");
                grMainJob.job_ended_at = new GlideDateTime();
            }
        } catch (ex) {

            var updateJobTrackerRecord3 = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_SERVICE_JOB_TRACKER_TABLE);
            if (updateJobTrackerRecord3.get(newJobTrackerRecord.sys_id)) {
                updateJobTrackerRecord3.job_state = 'failed';
                updateJobTrackerRecord3.error_source = 'api_error';
                updateJobTrackerRecord3.error_message = ex.getMessage() + "\n" + "Please check system error logs or flow designer executions";
                updateJobTrackerRecord3.job_ended_at = new GlideDateTime();
                updateJobTrackerRecord3.update();
            }
            grMainJob.state = 'failed';
            grMainJob.error_message = ex.getMessage() + "\n" + "Please check system error logs or flow designer executions";
            grMainJob.job_ended_at = new GlideDateTime();
            grMainJob.update();
            var message = ex.getMessage();
            gs.error(message);
        }
        grMainJob.update();
    }
} catch (ex) {
    var msg = ex.getMessage();
    gs.error(msg);
}]]></pre_script>
        <pre_script_bool>true</pre_script_bool>
        <record_source>regular</record_source>
        <run_as/>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period/>
        <run_start>2023-04-18 12:50:50</run_start>
        <run_time>1970-01-01 08:00:00</run_time>
        <run_type>daily</run_type>
        <show_connection_override>false</show_connection_override>
        <synchronize_inserts>true</synchronize_inserts>
        <sys_class_name>scheduled_import_set</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-04-18 12:51:17</sys_created_on>
        <sys_id>8dd2ad5d47da6110901d3a34846d436d</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>Workday Pull Leave of Absence Request Scheduled Import</sys_name>
        <sys_package display_value="HR Service Delivery Integration with Workday" source="sn_hr_workday">d4fb8bd8db5b0010205cdf6b5e96190e</sys_package>
        <sys_policy/>
        <sys_scope display_value="HR Service Delivery Integration with Workday">d4fb8bd8db5b0010205cdf6b5e96190e</sys_scope>
        <sys_update_name>scheduled_import_set_8dd2ad5d47da6110901d3a34846d436d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-19 13:36:27</sys_updated_on>
        <time_zone/>
        <upgrade_safe>false</upgrade_safe>
        <use_child_connection>false</use_child_connection>
    </scheduled_import_set>
</record_update>
