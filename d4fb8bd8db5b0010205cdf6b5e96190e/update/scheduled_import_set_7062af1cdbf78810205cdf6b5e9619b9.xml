<?xml version="1.0" encoding="UTF-8"?><record_update table="scheduled_import_set">
    <scheduled_import_set action="INSERT_OR_UPDATE">
        <active>false</active>
        <business_calendar/>
        <concurrent_import>false</concurrent_import>
        <condition><![CDATA[var glideWorkdayJobTracker = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_SERVICE_JOB_TRACKER_TABLE);
glideWorkdayJobTracker.addQuery('job_state', 'running');
glideWorkdayJobTracker.addQuery('workday_integration_service', new WorkdayPullToDosHelper().Workday_Integration_Service_Name_Pull_ToDos);
glideWorkdayJobTracker.query();
var result = true;
if (glideWorkdayJobTracker.next()) {
	gs.info(glideWorkdayJobTracker.scheduled_import+" - Scheduled Import is already running");
    //gs.info(gs.getMessage("'{0}' - Scheduled Import is already running",[glideWorkdayJobTracker.scheduled_import]));
    result = false;
}
result;]]></condition>
        <conditional>true</conditional>
        <connection_override/>
        <data_source display_value="Workday Pull To-Dos">e8c5f6781bcf545067817669cc4bcb25</data_source>
        <entered_time/>
        <map/>
        <max_drift/>
        <name>Workday Pull To-Dos Scheduled Import</name>
        <offset/>
        <offset_type/>
        <order/>
        <parent/>
        <partition_method>roundRobin</partition_method>
        <partition_script><![CDATA[(function partitionHash(import_set_row) {

	// Add your code here
	
	// eg:
	// return import_set_row.u_important_category;
	// This would ensure all rows with the same 'u_important_category' value will be in the same Import Set.

	 return import_set_row.sys_import_row;

})(import_set_row);]]></partition_script>
        <partition_size/>
        <post_script><![CDATA[try {
    var mainJobCompleted = false;
    var grMainJob = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_JOB_TRACKER_TABLE);
    grMainJob.addQuery("state", "running");
    grMainJob.orderByDesc('sys_created_on');
    grMainJob.setLimit(1);
    grMainJob.query();
    if (grMainJob.next()) {

        var newJobTrackerRecord = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_SERVICE_JOB_TRACKER_TABLE);
        newJobTrackerRecord.addQuery("import_set", import_set.sys_id);
        newJobTrackerRecord.query();
        if (newJobTrackerRecord.next()) {
            newJobTrackerRecord.scheduled_import = import_set.schedule_import;
            var gr = new GlideRecord("sys_import_set_run");
            gr.addQuery("set", import_set.sys_id);
            gr.query();
            if (gr.next()) {
                newJobTrackerRecord.import_set_run = gr.sys_id;
                if (newJobTrackerRecord.job_state == 'running' && (gr.state == 'complete' || gr.state == 'complete_with_errors')) {
                    newJobTrackerRecord.job_state = 'completed';
                    newJobTrackerRecord.job_ended_at = new GlideDateTime();
                    if (newJobTrackerRecord.pull_next_chunk == false) {
                        grMainJob.state = 'complete';
                        grMainJob.job_ended_at = new GlideDateTime();
                        mainJobCompleted = true;
                    }
                } else if (newJobTrackerRecord.job_state == 'running' && (gr.state == 'cancelled' || gr.state == 'incomplete')) {
                    newJobTrackerRecord.job_state = 'failed';
                    newJobTrackerRecord.job_ended_at = new GlideDateTime();
                    newJobTrackerRecord.error_source = 'transformation_error';
                    newJobTrackerRecord.error_message = gs.getMessage('Tranformation error with import set-{0} as "{1}" state', [import_set.number, gr.state]);

                    grMainJob.state = 'failed';
                    grMainJob.error_message = gs.getMessage('Tranformation error with import set-{0} as "{1}" state', [import_set.number, gr.state]);
                    grMainJob.job_ended_at = new GlideDateTime();
                }
                newJobTrackerRecord.update();
            }
        }
        grMainJob.update();
    }

    if (mainJobCompleted) {
        try {
            var inputs = {};
            inputs['job_tracker'] = grMainJob; // GlideRecord of table: sn_hr_workday_job_tracker 
            sn_fd.FlowAPI.getRunner().subflow('sn_hr_workday.trigger_workday_approval_todos_scheduled_import').inBackground().withInputs(inputs).run();
        } catch (ex) {
            gs.error(ex.message);
        }
    }

} catch (ex) {
    var message = ex.getMessage();
    gs.error(message);
    //gs.info('viv372872837283: ' + message);
}]]></post_script>
        <post_script_bool>true</post_script_bool>
        <pre_script><![CDATA[try {
	var grMainJob = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_JOB_TRACKER_TABLE);
	grMainJob.addQuery("state", "running");
	grMainJob.orderByDesc('sys_created_on');
	grMainJob.setLimit(1);
	grMainJob.query();
	if (grMainJob.next()) {
		var grMainJobSysId = grMainJob.sys_id;

		try {
			var attachment = new GlideSysAttachment();
			var agr = attachment.getAttachments('sys_data_source', data_source.sys_id);
			while (agr.next()) {
				attachment.deleteAttachment(agr.getValue('sys_id'));
			} //delete attachments exits already in data source


			var newJobTrackerRecord = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_SERVICE_JOB_TRACKER_TABLE);
			newJobTrackerRecord.initialize();
			newJobTrackerRecord.import_set = import_set.sys_id;
			newJobTrackerRecord.job_state = 'running';
			newJobTrackerRecord.job_type = 'scheduled';
			newJobTrackerRecord.workday_integration_service = new WorkdayPullToDosHelper().Workday_Integration_Service_Name_Pull_ToDos;
			newJobTrackerRecord.workday_integration_job_tracker = grMainJobSysId;
			newJobTrackerRecord.job_started_at = new GlideDateTime();

			var pullNextChunk;
			//initial load for specified configured parameter when no records are there in workday todos inbound table else take latest workday last functional updated date as start_date_time in action's input.
			var glidePullToDosConfiguration = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_CONFIGURATIONS_TABLE);
			glidePullToDosConfiguration.addQuery('active', true);
			glidePullToDosConfiguration.orderByDesc('sys_created_on');
			glidePullToDosConfiguration.setLimit(1);
			glidePullToDosConfiguration.query();
			if (glidePullToDosConfiguration.next()) {
				var inputs = {};
				var startDateTimeJob,endDateTimeJob;
				var glideWorkdayJobTracker = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_SERVICE_JOB_TRACKER_TABLE);
				glideWorkdayJobTracker.addQuery('job_state', 'completed');
				glideWorkdayJobTracker.addQuery('workday_integration_service', new WorkdayPullToDosHelper().Workday_Integration_Service_Name_Pull_ToDos);
				glideWorkdayJobTracker.orderByDesc('end_date_time_api_parameter');
				glideWorkdayJobTracker.setLimit(1);
				glideWorkdayJobTracker.query();
				if (glideWorkdayJobTracker.next()) {
					inputs['start_date_time'] = new ImportSetUtils().getConvertedDateTime(new GlideDateTime(glideWorkdayJobTracker.end_date_time_api_parameter).getValue());
					startDateTimeJob =  new GlideDateTime(glideWorkdayJobTracker.end_date_time_api_parameter).getDisplayValue();
					var gdt = new GlideDateTime(glideWorkdayJobTracker.end_date_time_api_parameter.toString());
					var ms = glidePullToDosConfiguration.load_interval.dateNumericValue();
					gdt.add(ms);
					var endDateTime = gdt.getDisplayValue();
					if (gdt.getNumericValue() > new GlideDateTime(grMainJob.job_started_at).getNumericValue()) {
						inputs['end_date_time'] = new ImportSetUtils().getConvertedDateTime(new GlideDateTime(grMainJob.job_started_at).getValue());
						endDateTimeJob = new GlideDateTime(grMainJob.job_started_at).getDisplayValue();
						pullNextChunk = false;
					} else {
						inputs['end_date_time'] = new ImportSetUtils().getConvertedDateTime(gdt.getValue());
						endDateTimeJob = endDateTime;
						pullNextChunk = true;
					}
				} else {
					inputs['start_date_time'] = new ImportSetUtils().getConvertedDateTime(new GlideDateTime(glidePullToDosConfiguration.initial_load_start_datetime).getValue());
					startDateTimeJob = new GlideDateTime(glidePullToDosConfiguration.initial_load_start_datetime).getDisplayValue();
					var gdt1 = new GlideDateTime(glidePullToDosConfiguration.initial_load_start_datetime.toString());
					var ms1 = glidePullToDosConfiguration.load_interval.dateNumericValue();
					gdt1.add(ms1);
					var endDateTime1 = gdt1.getDisplayValue();
					if (gdt1.getNumericValue() > new GlideDateTime(grMainJob.job_started_at).getNumericValue()) {
						inputs['end_date_time'] = new ImportSetUtils().getConvertedDateTime(new GlideDateTime(grMainJob.job_started_at).getValue());
						endDateTimeJob = new GlideDateTime(grMainJob.job_started_at).getDisplayValue();
						pullNextChunk = false;
					} else {
						inputs['end_date_time'] = new ImportSetUtils().getConvertedDateTime(gdt1.getValue());
						endDateTimeJob = endDateTime1;
						pullNextChunk = true;
					}
				}

				newJobTrackerRecord.start_date_time_api_parameter = startDateTimeJob;
				newJobTrackerRecord.end_date_time_api_parameter = endDateTimeJob;
				if (!gs.nil(pullNextChunk)) {
					newJobTrackerRecord.pull_next_chunk = pullNextChunk;
				}
				newJobTrackerRecord.insert();

				inputs['report_owner_username'] = glidePullToDosConfiguration.workday_to_dos_report_owner_username;
				inputs['report_name'] = glidePullToDosConfiguration.workday_to_dos_raas_report_name;
				inputs['data_source_reference'] = data_source;
				var outputs = sn_fd.FlowAPI.executeAction('sn_workday_hr_spke.look_up_inbox_items', inputs, 1800000);
				var status = outputs['status']; // Choice
				var error_message = outputs['error_message'];

				if (status == 'Error') {
					var updateJobTrackerRecord1 = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_SERVICE_JOB_TRACKER_TABLE);
					if (updateJobTrackerRecord1.get(newJobTrackerRecord.sys_id)) {
						updateJobTrackerRecord1.job_state = 'failed';
						updateJobTrackerRecord1.error_source = 'api_error';
						updateJobTrackerRecord1.error_message = error_message;
						updateJobTrackerRecord1.job_ended_at = new GlideDateTime();
						updateJobTrackerRecord1.update();

						grMainJob.state = 'failed';
						grMainJob.error_message = error_message;
						grMainJob.job_ended_at = new GlideDateTime();
					}
				}
			} else {
				if (!gs.nil(pullNextChunk)) {
					newJobTrackerRecord.pull_next_chunk = pullNextChunk;
				}
				newJobTrackerRecord.error_source = 'configuration_error';
				newJobTrackerRecord.job_state = 'failed';
				newJobTrackerRecord.error_message = gs.getMessage("No active workday pull to-dos configuration record found");
				newJobTrackerRecord.job_ended_at = new GlideDateTime();
				newJobTrackerRecord.insert();

				grMainJob.state = 'failed';
				grMainJob.error_message = gs.getMessage("No active workday pull to-dos configuration record found");
				grMainJob.job_ended_at = new GlideDateTime();
			}
		} catch (ex) {

			var updateJobTrackerRecord3 = new GlideRecord(new WorkdayPullToDosHelper().WORKDAY_SERVICE_JOB_TRACKER_TABLE);
			if (updateJobTrackerRecord3.get(newJobTrackerRecord.sys_id)) {
				updateJobTrackerRecord3.job_state = 'failed';
				updateJobTrackerRecord3.error_source = 'api_error';
				updateJobTrackerRecord3.error_message = ex.getMessage() + "\n" + "Please check system error logs or flow designer executions";
				updateJobTrackerRecord3.job_ended_at = new GlideDateTime();
				updateJobTrackerRecord3.update();
			}
			grMainJob.state = 'failed';
			grMainJob.error_message = ex.getMessage() + "\n" + "Please check system error logs or flow designer executions";
			grMainJob.job_ended_at = new GlideDateTime();
			grMainJob.update();
			var message = ex.getMessage();
			gs.error(message);
		}
		grMainJob.update();
	}
} catch (ex) {
	var msg = ex.getMessage();
	gs.error(msg);
}]]></pre_script>
        <pre_script_bool>true</pre_script_bool>
        <record_source/>
        <run_as display_value="System Administrator">6816f79cc0a8016401c5a33be04be441</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period>1970-01-30 00:00:10</run_period>
        <run_start>2021-02-10 08:05:27</run_start>
        <run_time>1970-01-01 08:00:00</run_time>
        <run_type>daily</run_type>
        <show_connection_override>false</show_connection_override>
        <synchronize_inserts>true</synchronize_inserts>
        <sys_class_name>scheduled_import_set</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-03-23 08:08:35</sys_created_on>
        <sys_id>7062af1cdbf78810205cdf6b5e9619b9</sys_id>
        <sys_mod_count>375</sys_mod_count>
        <sys_name>Workday Pull To-Dos Scheduled Import</sys_name>
        <sys_package display_value="HR Service Delivery Integration with Workday" source="sn_hr_workday">d4fb8bd8db5b0010205cdf6b5e96190e</sys_package>
        <sys_policy/>
        <sys_scope display_value="HR Service Delivery Integration with Workday">d4fb8bd8db5b0010205cdf6b5e96190e</sys_scope>
        <sys_update_name>scheduled_import_set_7062af1cdbf78810205cdf6b5e9619b9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-06 06:16:28</sys_updated_on>
        <time_zone/>
        <upgrade_safe>false</upgrade_safe>
        <use_child_connection>false</use_child_connection>
    </scheduled_import_set>
</record_update>
